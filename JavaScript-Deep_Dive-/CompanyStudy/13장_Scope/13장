** 스코프(Scope 13.1 ~ 13.3) 상 **

  모든 식별자(변수 이름, 함수 이름, 클래스 이름, 등)는 
  자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다.
  이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다.

  1. var 키워드로 선언한 변수 
      유효 범위 : Function Scope
      값 재할당 : 가능
      재선언 : 가능

  2. let 키워드로 선언한 변수
      유효 범위 : Block Scope
      값 재할당 : 가능
      재선언 : 불가능

  2. const 키워드로 선언한 변수
      유효 범위 : Block Scope
      값 재할당 : 불가능
      재선언 : 불가능

  식별자 결정(identifier) : JavaScript엔진은 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 
                        할 것인지를 결정해야한다.
  * 스코프란 JavaScript 엔진이 식별자를 검색할 때 사용하는 규칙

  전역 스코프 내 : global Scope 
  함수 스코프 내 : local Scope

  만약 스코프라는 개념이 없다면 같은 이름을 갖는 변수는 충돌 발생 프로그램 전체에서 하나만 사용가능
  - var 사용 했을 경우 같은 변수명이 있을 경우 의도치 않게 변수값이 재할당 되어 원치 않는 결과를 갖게 될 수 있다.
    반면, let, const 키워드로 선업된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.

  전역 스코프(global Scope) : 코드이 가장 바깥 영역, 어디서든지 참조 가능
  지역 스코프(local Scope) : 자신의 지역 스코프와 하위 지역 스코프에서 유효하다, 함수 몸체 내부 
  
  스코프 체인
  스코프가 함수의 중첩에 의해 계층적 구조를 갖는다.

  변수를 참조할 때 JavaScript 엔진은 스코프 체인(Scope Chain)을 통해 변수를 참조하는 코드의 스코프에서
  시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색(identifier resolution)한다.

  + 반대로 하위 스코프에서 선언된 변수는 상위 스코프에서 사용할 수는 없다. 지역 내에서만 사용가능하다.
    상위 스코프에서 선언되어 있는 변수는 하위 스코프에서 사용 가능하다. 전역에서 선언되어 있는 변수는
    상, 하위 스코프 상관없이 사용이 가능하다. 
  === 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 
      하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다.

   * 변수를 검색할 때 사용하는 규칙 보다는 "식별자를 검색하는 규칙" 이라고 표현하는 편이 좀 더 적합하다.



** 스코프(Scope 13. ~ 13.) 하 **