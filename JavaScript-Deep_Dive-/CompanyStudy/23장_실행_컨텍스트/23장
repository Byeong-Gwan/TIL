** 23장 실행 컨텍스트 **

  - 실행 컨텍스트(execution context)는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.

23.1 소스코드 타입

  실행 컨텍스트에는 소스코드 타입이 4가지로 분류한다.
  - 전역 코드 (global code) : 전역에 존재하는 소스코드를 말한다. 전역에 정의된 함수, 
    클래스 등의 내부 코드는 포함하지 않는다.

  - 함수 코드 (function code) : 함수 내부에 존재하는 소스코드를 말한다. 
    함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다.

  - eval 코드 (eval code) : 빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드를 말한다.

  - 모듈 코드 (module code) : 모듈 내부에 존재하는 소스코드를 말한다. 
    모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다.

  1. 전역 코드
    전역 코드는 전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야 한다.

  2. 함수 코드
    함수 코드는 지역 스코프를 생성하고 지역 변수, 매개변수, arguments 객체를 관리해야 한다.

  3. eval 코드
    eval 코드는 strict mode(엄격 모드)에서 자신만의 독자적인 스코프를 생성한다.

  4. 모듈 코드
    모귤 코드는 모듈별로 독립적인 모듈 스코프를 생성한다.

23.2 소스코드의 평가와 실행 (01)

  - 자바스크립트는 "소스코드의 평가"와 "소스코드의 실행" 과정으로 나누어 처리한다.

    1. 소스코드의 평가 : 실행 컨텍스트를 생성하고 변수, 함수 등의 선언문만 먼저 실행하여 
            생성된 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 
            스코프(렉시컬 환경의 환경 레코드)에 등록한다.

    2. 소스코드의 실행 : 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다.
            변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록한다.

23.3 실행 컨텍스트의 역할 (02)

  전역 코드 평가 => 전역 코드 실행 => 함수 코드 평가 => 함수 코드 실행

  코드가 실행되려면 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.

  1. 선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록하고 상태 변화
   (식별자에 바인딩된 값의 변화)를 지속적으로 관리할 수 있어야 한다.

  2. 스코프 체인을 통해 상위 스코프로 이동하며 식별자를 검색할 수 있어야 한다.

  3. 현재 실행 중인 코드의 실행 순서를 변경(함수 호출에 의해 실행 순서 변경)할 수 있어야 하며 
    다시 되돌아갈 수도 있어야 한다.

  실행 컨텍스트는 식별자(변수, 함수, 클래스 등의 이름)를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.

  식별자와 스코프는 실행 컨텍스트의 렉시컬 환경으로 관리하고 코드 실행 순서는 실행 컨텍스트 스택으로 관리한다.

23.4 실행 컨텍스트 스택 (03)

  img 참조

  스택은 실행되는 순으로 쌓이게 되고 맨 위의 데이터가 실행되는 동안은 다른 데이터들은 일시 중단 된 상태가 된다.
  
  실행 컨텍스트 스택은 코드의 실행 순서를 관리한다.
  
  실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트다.
  실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 실행 중인 실행 컨텍스트(running execuition context)

23.5 렉시컬 환경

  렉시컬 환경 (Lexical Environment) : 식별자와 식별자에 바인딩된 값, 
      그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트다. 
      스코프와 식별자를 관리


  렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.

  1. 환경 레코드 (Environment Record)
    스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소다.
    환경 레코드는 소스코드의 타입에 따라 관리하는 내용에 차이가 있다.

  
  2. 외부 렉시컬 환경에 대한 참조 (Outer Lexical Environment Reference)
    외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다. 이때 상위 스코프란 외부 렉시컬 환경,
    즉 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다.
    외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.

23.6 실행 컨텍스트의 생성과 식별자 검색 과정 (04)


23.6.1 전역 객체 생성

  전역 코드가 평가되기 이전에 생성된다.
  전역 객체도 프로토타입 체인의 일원이다.


23.6.2 전역 코드 평가

  1. 전역 실행 컨텍스트 생성 : 실행 중인 실행 컨텍스트(running execution context)가 된다.

  2. 전역 렉시컬 환경 생성 : 환경 레코드(Environment Record)와 외부 렉시컬 환경에 대한 참조
                      (OuterLexicalEnvironmentReference)로 구성된다.

    2.1 전역 환경 레코드 생성 : 전역 환경 레코드의 객체 환경 레코드와 선언적 환경 레코드는 서로 협력하여
                      전역 스코프와 전역 객체(전역 변수의 전역 객체 프로퍼티화)를 관리한다.

      2.1.1 객체 환경 레코드 생성 : 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로
                      정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.

      2.1.2 선언적 환경 레코드 생성 : let, const 키워드로 선언한 전역 변수
                      (let, const 키워드로 선언한 변수에 할당한 함수 표현식 포함)는 선언적 환경 레코드에 등록되고 관리된다. 즉 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 일시적 사각지대(Temporal Dead Zone; TDZ)에 빠지게 된다.

    2.2 this 바인딩 : 
      - this는 함수가 호출될 때 자동으로 결정되는 값으로, 함수를 어떻게 호출하느냐에 따라 달라집니다. 
        이를 this   바인딩이라고 합니다. 예를 들어, 일반적인 함수 호출에서는 this는 전역 객체를 가리키게 되지만, 객체의 메서드로 호출된 함수에서는 해당 객체를 가리킵니다.

      - 이러한 this 바인딩은 코드 실행 도중에 함수가 실행되는 컨텍스트에 따라서 동적으로 바뀔 수 있으므로,
        주의해서 사용해야 합니다. 특히, 화살표 함수에서는 자신만의 this 바인딩이 없기 때문에, 상위 스코프의 this 값을 그대로 사용하게 됩니다. 이러한 차이점을 이해하고 적절히 활용하는 것이 중요합니다.

    2.3 외부 렉시컬 환경에 대한 참조 결정 : 외부 렉시컬 환경에 대한 참조 (Outer Lexical Environment   
              Reference)는 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다. 이를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.

23.6.3 전역 코드 실행

  - 동일한 이름의 식별자가 다른 스코프에 여러 개 존재할 수도 있다.
  - 어느 스코프의 식별자를 참조하면 되는지 결정할 필요가 있다. 이를 식별자 결정(identifier resolution)일 한다.
  - 식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색하기 시작한다.
  - 실행 컨텍스트는 소스코드를 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.

23.6.4 foo 함수 코드 평가 (08)

  - foo() 함수가 실행되면 전역 코드의 실행을 일시 중단되고 foo 함수 내부로 코드의 제어권이 이동한다.

  1. 함수 실행 컨텍스트 생성 : 생성된 함수 실행 컨텍스트는 함수 렉시컬 환경이 완성된 다음 
            실행 컨텍스트 스택에 푸시된다.

  2. 함수 렉시컬 환경 생성

    2.1 함수 환경 레코드 생성 : 함수 렉시컬 환경을 구성하는 컴포넌트 중 하나인 함수 환경 레코드(Function 
              Environment Record)는 매개변수, arguments 객체, 함수 내부에서 선언한 지역 변수와 중첩 함수를 등록하고 관리한다.

    2.2 this 바인딩 : foo 함수는 일반 함수로 호출되었므로 this는 전역 객체를 가리킨다. 
              함수 환경 레코드의 [[ThisValue]] 내부 슬롯에는 전역 객체가 바인딩된다. foo 함수 내부에서 this를 참조하면 함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 바인딩되어 있는 객체가 반환된다.

    2.3 외부 렉시컬 환경에 대한 참조 결정 : 함수를 어디서 호출했는지가 아니라 어디에 정의했는지에 
              따라 상위 스코프를 결정한다


23.6.5 foo 함수 코드 실행

  - 식별자 결정을 위해 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색하기 시작한다.
  - 모든 식별자는 현재 실행 중인 실행 컨텍스트의 렉시컬 환경에서 모두 검색할 수 있다. 
    검색된 식별자에 값을 바인딩한다.

23.6.6 bar 함수 코드 평가 (09)

  - bar 함수 내부로 코드의 제어권이 이동한다.

23.6.7 bar 함수 코드 실행

  1. console 식별자 검색
    - 식별자를 검색할 때는 언제나 현재 실행 중인 실행 컨텍스트의 렉시컬 화녕에서 검색하기 시작한다.
    - 전역 렉시컬 환경은 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있다.
    - console 식별자는 객체 환경 레코드의 BindingObject를 통해 전역 객체에서 찾을 수 있다.

  2. log 메서드 검색 (10)
    - log 메서드는 상속된 프로퍼티가 아니라 console 객체가 직접 소유하는 프로퍼티다.

23.6.8 bar 함수 코드 실행 종료

  - bar 함수 실행 컨텍스트가 소멸되었다 하더라도 만약 bar 함수 렉시컬 환경을 누군가 참조하고 있다면 bar함수 
    렉시컬 환경은 소멸하지 않는다.

23.7 실행 컨텍스트와 블록 레벨 스코프 (11)

  - var 키워드 : 함수 레벨 스코프
  - let, const 키워드 : 블록 레벨 스코프

  