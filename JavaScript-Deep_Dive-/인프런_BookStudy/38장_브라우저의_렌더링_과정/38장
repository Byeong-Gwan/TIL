**38장 브라우저의 렌더링 과정

    * 렌더링(rendering)
        HTML, CSS, Javascript로 작성된 문서를 파싱하여 브라우저에 시각적으로 출력하는 것을 말한다.

    - 브라우저의 렌더링 과정은 다음과 같은 과정을 거칩니다.

        1. HTML 파싱과 DOM 트리 구성
            - 브라우저는 HTML을 파싱하여 DOM(Document Object Model) 트리를 구성합니다.
            - DOM 트리는 브라우저가 렌더링하는 데 필요한 문서 구조를 나타내는 노드의 트리 구조입니다.
                
        2. CSS 파싱과 CSSOM 트리 구성
            - 브라우저는 CSS 파일을 파싱하여 CSSOM(CSS Object Model) 트리를 구성합니다.
            - CSSOM 트리는 각각의 노드가 스타일 규칙과 매칭되는 DOM 노드를 참조하는 트리 구조입니다.
                
                
        3. 렌더 트리 구성

            - DOM과 CSSOM 트리를 결합하여 렌더 트리(render tree)를 구성합니다.
            - 렌더 트리는 화면에 표시할 요소와 스타일 정보를 가지고 있는 트리 구조입니다.
        
        4. 레이아웃(Layout)

            - 브라우저는 렌더 트리를 기반으로 각 요소의 크기와 위치를 계산합니다.
            - 이를 레이아웃(layout) 또는 리플로우(reflow)라고 합니다.
        
        5. 페인팅(Painting)

            - 브라우저는 화면에 표시할 부분을 계산하여 실제로 화면에 그립니다.
            - 이를 페인팅(painting) 또는 리페인팅(repainting)이라고 합니다.

    38.1 요청과 응답

        - 렌더링에 필요한 리소스는 모두 서버에 존재하므로 필요한 리소스를 서버에 요청하고 
            서버가 응답한 리소스를 파싱하여 렌더링하는 것이다.

        - 서버에 요청을 전송하기 위해 브라우저는 주소창을 제공한다.
        - 브라우저의 주소창에 URL을 입력하고 엔터 키를 누르면 URL의 호스트 이름이 DNS를 통해 IP 주소로 변환되고
            이 IP 주소를 갖는 서버에게 요청을 전송한다.

    38.2 HTTP 1.1과 HTTP 2.0

        HTTP 1.1과 HTTP 2.0은 모두 웹에서 사용되는 프로토콜이지만, 여러 가지 측면에서 차이가 있습니다.

            1. 성능
                HTTP 1.1은 요청/응답 방식으로 작동하며, 클라이언트는 한 번에 하나의 요청만 보낼 수 있습니다. 
                따라서, 여러 개의 파일을 다운로드하려면 각 파일에 대해 별도의 요청을 보내야 합니다. 이는 대역폭을 낭비하고, 
                지연을 유발하는 문제가 있습니다. 반면, HTTP 2.0은 다중화(multiplexing) 기능을 제공하여 여러 요청/응답을 동시에 처리할 수 있습니다. 
                이는 대역폭을 최대한 활용하고, 성능을 향상시킵니다.

            2. 헤더 압축
                HTTP 1.1은 헤더 정보를 텍스트로 전송하므로, 중복되는 헤더 정보가 많은 경우에는 불필요한 데이터 전송이 발생할 수 있습니다. 
                이는 대역폭의 낭비와 지연을 유발할 수 있습니다. HTTP 2.0은 헤더 정보를 바이너리 형식으로 압축하여 전송하므로, 
                중복되는 헤더 정보를 최소화하고, 데이터 전송량을 최소화합니다.

            3. 서버 푸시
                HTTP 2.0은 서버 푸시(server push) 기능을 제공합니다. 클라이언트가 요청하지 않은 파일(예: 자바스크립트, CSS)을 서버에서 미리 보내주어,
                클라이언트의 요청을 대기하는 시간을 줄이고, 페이지 로딩 속도를 향상시킬 수 있습니다.

            4. 보안
                HTTP 2.0은 SSL 인증서를 사용하여 암호화된 연결(HTTPS)을 지원합니다. 이는 정보 보안을 향상시키고, 
                중간자 공격 등을 방지할 수 있습니다.

        - HTTP 2.0은 HTTP 1.1에 비해 더욱 빠르고, 안전하며, 효율적인 웹 서비스를 제공할 수 있습니다.

    38.4 CSS 파싱과 CSSOM 생성

        - 렌더링 엔진은 DOM을 생성해 나가다가 CSS를 로드하는 link 태그나 style 태그를 만나면 DOM 생성을 일시 중단한다.
        - CSS를 HTML과 동일한 파싱 과정(바이트 -> 문자 -> 토큰 -> 노드 -> CSSOM)을 거치며 해석하여 
            CSSOM(CSS Object Model)을 생성한다.
        - CSS 파싱을 완료하면 HTML 파싱이 중단된 지점부터 다시 HTML을 파싱하기 시작하여 DOM 생성을 재개한다.

    38.5 렌더 트리 생성

        - DOM과 CSSOM은 렌더링을 위해 렌더 트리(render tree)로 결합
        - 레이아웃 계산과 페인팅을 다시 실행하는 리렌더링은 비용이 많이 드는, 즉 성능에 악영향을 주는 작업이다.
            따라서 가급적 이엔더링이 빈번하게 발생하지 않도록 주의할 필요가 있다.

    38.6 자바스크립트 파싱과 실행

        1. 소스 코드 입력
            자바스크립트 코드가 웹페이지의 <script> 태그, 외부 파일, 인라인 스크립트 등을 통해 입력됩니다.

        2. 토큰화
            입력된 소스 코드는 문자열로 이루어져 있으며, 이를 토큰화 과정을 통해 의미 있는 조각으로 분해합니다. 
            토큰은 변수 이름, 연산자, 구두점, 키워드 등으로 이루어져 있습니다.

        3. 파싱
            토큰화된 자바스크립트 코드를 구문 분석하여 추상 구문 트리(Abstract Syntax Tree, AST)를 생성합니다. 
            추상 구문 트리는 자바스크립트 코드의 구문 구조를 나타냅니다.

        4. 바이트 코드 생성
            생성된 추상 구문 트리를 바이트 코드 또는 머신 코드로 변환합니다. 이 단계에서는 코드 최적화가 이루어질 수도 있습니다.

        5. 실행
            생성된 머신 코드가 실행되어 자바스크립트 엔진에서 원하는 동작을 수행합니다. 
            이 때, 코드 실행 중 예외가 발생할 경우 예외 처리 과정이 수행됩니다.

        이러한 과정을 통해 자바스크립트 코드는 실행됩니다. 이때, 
        모던 자바스크립트 엔진들은 코드 실행 전에 먼저 코드 최적화를 수행합니다. 
        이를 통해 실행 속도를 높이고 메모리 사용량을 줄이는 등의 성능 향상을 이룰 수 있습니다. 
        최적화 과정에서는 코드의 구문 분석, 인라인 캐싱, 인라인 확장 등의 기술이 사용됩니다.

            <<추가 검색 학습>>
            1. 토크나이징 (Tokenizing): 소스 코드를 구문 분석 가능한 토큰(token)으로 변환합니다. 
                토큰은 언어에서 의미 있는 최소 단위로, 변수, 연산자, 구문 기호 등이 될 수 있습니다.

            2. 구문 분석 (Parsing): 토큰을 분석하여 구문 트리(Syntax Tree)를 생성합니다. 
                구문 트리는 소스 코드의 구조와 규칙을 나타내는 트리 구조로, 이후 실행 과정에서 이용됩니다.

            3. 바이트 코드 생성 (Bytecode generation): 구문 분석을 통해 생성된 구문 트리를 기반으로 중간 코드(Intermediate Code)를 생성합니다. 
                중간 코드는 실행 가능한 기계 코드보다 추상적인 코드이며, 자바스크립트 엔진에서 사용됩니다.

            4. 최적화 (Optimization): 자바스크립트 엔진은 생성된 중간 코드를 분석하고 최적화합니다. 
                예를 들어, 불필요한 코드를 제거하거나 코드 실행 순서를 최적화하여 실행 속도를 향상시킵니다.

            5. 실행 (Execution): 최적화된 중간 코드가 실행됩니다. 이 과정에서 변수에 값이 할당되고, 함수가 호출되며, 연산이 수행됩니다.

        자바스크립트 엔진은 위와 같은 단계를 거치며, 실행 속도와 메모리 사용량을 최적화합니다. 이를 통해 빠르고 효율적인 코드 실행이 가능해집니다.

    38.7 리플로우와 리페인트

        - 리플로우와 리페인트가 반드시 순차적으로 동시에 실행되는 것은 아니다.
            레이아웃에 영향이 없는 변경은 리플로우 없이 리페인트만 실행된다.

    38.8 자바스크립트 파싱에 의한 HTML 파싱 중단

        - 렌더링 엔진과 자바스크립트 엔진은 병렬적으로 파싱하지 않고 직렬적으로 파싱을 수행한다.
        - script 태그의 위치가 중요하다.
    (04)

        - 위 예제의 문제를 회피하기 위해서 body 요소의 가장 아래에 script 태그를 위치시키는 것이 좋다.

        - DOM이 완성되지 않은 상태에서 자바스크립트가 DOM을 조작하면 에러가 발생할 수 있다.
        - 자바스크립트 로딩/파싱/실행으로 인해 HTML 요소들의 렌더링에 지정받는 일이 발생하지 않아 페이지 로딩 시간이 단축된다.

    (05)

        - 자바스크립트가 실행되기 이전에 DOM 생성이 완료되어 렌더링되므로 페이지 로딩 시간이 단축되는 이점도 있다.

    38.9 script 태그의 async/defer 어트리뷰트

        script 태그는 HTML 문서 안에서 JavaScript 코드를 실행하기 위해 사용됩니다. script 태그는 일반적으로 head 태그 안에 위치합니다.

        그러나, script 태그가 HTML 문서의 parsing과정 중에 발견될 때, HTML 문서의 parsing이 차단됩니다. 
        즉, 스크립트 파일의 다운로드와 파싱이 완료될 때까지 HTML 문서의 렌더링이 멈춥니다. 
        이것은 웹 페이지가 느리게 로드되는 주요 이유 중 하나입니다.

        이러한 문제를 해결하기 위해, HTML5에서는 async와 defer 어트리뷰트가 추가되었다.

            - async: async 어트리뷰트가 있는 script 태그는 HTML 문서의 parsing을 차단하지 않고, 비동기적으로 다운로드와 실행이 진행됩니다.
                이 때, 스크립트 파일이 다운로드되기 전에 다른 스크립트 파일이나 페이지 구성 요소를 로드하려고 시도할 수 있습니다. 
                그러므로, async 어트리뷰트가 있는 스크립트는 다른 스크립트나 페이지 구성 요소에 의존하지 않아야 합니다.

            - defer: defer 어트리뷰트가 있는 script 태그도 비동기적으로 다운로드되고 실행되지만, 
                async와 달리 HTML 문서의 parsing을 차단하지 않고 다운로드만 비동기적으로 진행됩니다. 
                그리고 HTML 문서의 parsing이 완료된 후에 실행됩니다. 그러므로, defer 어트리뷰트가 있는 스크립트는 
                다른 스크립트나 페이지 구성 요소와 의존관계를 가질 수 있습니다.

            - async와 defer 어트리뷰트는 스크립트 파일의 다운로드와 실행을 최적화하고, 
                HTML 문서의 parsing을 차단하지 않으므로 웹 페이지의 로딩 속도를 향상시킬 수 있습니다. 
                따라서, 가능하면 모든 스크립트 태그에 async와 defer 어트리뷰트를 적용하는 것이 좋습니다.