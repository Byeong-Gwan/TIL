** 21장 빌트인 객체 **

21.1 자바스크립트 객체의 분류

  표준 빌트인 객체 - 전역 객체의 프로퍼티로서 제공된다. 
          따라서 별도의 선언 없이 전역 변수처럼 언제나 참조할 수 있다.

  호스트 객체 - 해당 환경에서만 사용할 수 있으며, 호스트 객체의 사용 방법과 동작 방식은
          해당 환경의 문서를 참고해야 합니다. 호스트 객체를 사용하면 자바스크립트 코드가 해당 환경에서
          더 다양한 작업을 수행할 수 있게 되며, 이를 통해 더 다양한 응용 프로그램을 개발할 수 있습니다.

  사용자 정의 객체 - 프로그래머가 직접 정의한 객체를 의미합니다. 
          객체는 여러 개의 속성(property)과 메서드(method)로 구성되며, 객체는 객체 리터럴, 생성자 함수, 
          클래스 등을 사용하여 정의할 수 있습니다.

21.2 표준 빌트인 객체 (01, 02, 03)
  
  자바스크립트는  대략 40여 개의 표준 빌트인 객체를 제공합니다.
  
  Math, Reflect, JSON을 제외한 표준 빌트인 객체는 모두 인스턴스를 생성할 수 있는 생성자 함수 객체 입니다.
  생성자 함수 객체인 표준 빌트인 객체는 프로토타입 메서드와 정적 메서드를 제공하고 생성자 함수 객체가 아닌
  표준 빌트인 객체는 정적 메서드만 제공합니다.

21.3 원시값과 래퍼 객체

  원시값은 객체가 아니므로 프로퍼티나 메서드를 가질 수 없는데도 원시값인 문자열이 마치 객체처럼 동작합니다.

  원시값을 객체처럼 사용하면 자바스크립트 엔진은 암묵적으로 연관된 객체를 생성하여 생성된 객체로 
  프로퍼티에 접근하거나 메서드를 호출하고 다시 원시값으로 되돌립니다.

  문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 래퍼 객체(wrapper object)라 합니다.

  문자열 래퍼 객체인 String 생성자 함수의 인스턴스는 String.propotype의 메서드를 상속받아 사용할 수 있습니다.

  그 후 래퍼 객체의 처리가 종료되면 래퍼 객체의 [[StringData]] 내부 슬롯에 할당된 원시값으로 원래의 상태,
  즉 식별자가 원시값을 갖도록 되돌리고 래퍼 객체는 가비지 컬렉션의 대상이 된다.

  ES6에서 새롭게 도입된 원시값인 심벌(Symbol)도 래퍼 객체를 생성하나. 
  심벌(Symbol)은 일반적인 원시값과는 달리 리터럴 표기법으로 생성할 수 없고 Symbol 함수를 통해 생성해야 하므로
  다른 원시값과는 차이가 있다.

  문자열, 숫자, 불리언, 심벌은 암묵적으로 생성되는 래퍼 객체에 의해 마치 객체처럼 사용할 수 있으며,
  표준 빌트인 객체인 String, Number, Boolean, Symbol의 프로토타입 메서드 또는 프로퍼티를 참조할 수 있다.

  => String, Number, Boolean 생성자 함수를 new 연산자와 함께 호출하여 문자열, 숫자, 불리언 인스턴스를 
  생성할 필요 없으며 권장하지도 않는다. Symbol은 생성자 함수가 아니므로 이 논의에서는 제외

  문자열, 숫자, 불리언, 심벌 이외의 원시값, 즉 null, undefined는 래퍼 객체를 생성하지 않는다. 
  따라서 null, undefined 값을 객체처럼 사용하면 에러가 발생한다.

21.4 전역 객체 (08, 09, 10, 11)

  전역 객체(window) - 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떠한 객체보다도 먼저 생성(특수 객체)
        어떤 객체에도 속하지 않는 최상위 객체 
        브라우저 환경에서는 self, this, frames가 전역 객체를 가리키지만, Node.js 환경에서는 global이 가리킨다.

  전역 객체는 계층적 구조상 어떤 객체에도 속하지 않은 모든 빌트인 객체(표준 빌트인 객체와 호스트 객체)의
  최상위 객체다.(프로토타입 상속 관계상에서 최상위 객체라는 의미는 아니다.)
  전역 객체 자신은 어떤 객체의 프로퍼티도 아니며 객체의 계층적 구조상 표준 빌트인 객체와 호스트 객체를
  프로퍼티로 소유 한다는 의미이다.

  - 전역 객체는 개발자가 의도적으로 생성할 수 없다. 즉, 전역 객체를 생성할 수 있는 생성자 함수가 제공되지 않는다.
  - 전역 객체의 프로퍼티를 참조할 때 window(또는 global)를 생략할 수 있다.


  - 전역 객체는 Object, String, Number, Boolean, Function, Array, RegExp, Date, Math, Promise
    같은 모든 표준 빌트인 객체를 프로퍼티로 가지고 있다.

  - 자바스크립트 실행 환경(브라우저 환경 또는 Node.js 환경)에 따라 추가적으로 프로퍼티와 메서드를 갖는다. 
    브라우저 환경에서는 DOM, BOM, Canvas, XMLHttpRequest, fetch, requestAnimationFrame, SVG, Web Storage,
    Web Worker 같은 클라이언트 사이드 Web API를 호스트 객체로 제공하고 Node.js 환경에서는 Node.js
    고유의 API를 호스트 객체로 제공한다.

  - var 키워드로 선언한 전역 변수와 선언하지 않은 변수에 값을 할당한 암묵적 전역, 
    그리고 전역 함수는 전역 객체의 프로퍼티가 된다.

  - let, const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. 즉, window.foo와 같이 접근할 수 없다.
    let, const 키워드로 선언한 전역 변수는 보이지 않는 개념적인 블록(전역 렉시컬 환경의 선언적 환경 레코드)
    내에 존재하게 된다.

  - 브라우저 환경의 모든 자바스크립트 코드는 하나의 전역 객체 window를 공유한다.
    여러개의 script 태그를 통해 자바스크립트 코드를 분리해도 하나의 전역 객체 window를 공유하는 것은 변함이 없다.
    이는 분리되어 있는 자바스크립트 코드가 하나의 전역을 공유한다는 의미이다.

21.4.1 빌트인 전역 프로퍼티 (12, 13, 14)

  전역 객체의 프로퍼티를 의미
  주로 애플리케이션 전역에서 사용하는 값을 제공

  Infinity - Infinity 프로퍼티는 무한대를 나타내는 숫자값 Infinity

  NaN - 숫자가 아님(Not-a-Number)을 나타내는 숫자값 NaN
        NaN 프로퍼티는 Number.NaN 프로퍼티와 같다.

  undefined - 원시 타입 undefined

21.4.2 빌트인 전역 함수 (15 ~ 36)

  애플리케이션 전역에서 호출할 수 있는 빌트인 함수로서 전역 객체의 메서드다.

  eval - eval 함수는 문자열을 인수로 전달 받음, 
        전달받은 문자열 코드가 표현식이면 문자열 코드를 런타임에 평가하여 값을 생성,
        아니면 문자열 코드를 런타임에 실행,
        문자열 코드가 여러 개의 문으로 이루어져 있다면 모든 문을 실행

        인수로 전달받은 문자열 코드가 여러 개의 문으로 이루어져 있다면 모든 문을 실행한 다음
        마지막 결과값을 반환한다.

        자신이 호출된 위치에 해당하는 기존의 스코프를 런타임에 동적으로 수정

        인수로 전달받은 문자열 코드가 let, const 키워드를 사용한 변수 선언문이라면
        암묵적으로 strict mode가 적용

        단점으로 보안에 취약하다. eval 함수의 사용을 지양한다.

  isFinite - 전달받은 인수가 유한수인지 검사 유한수 : 무한수 ? true : false 를 반환한다.
        전달받은 인수 타입은 숫자로 변환 후 검사
        인수값 === NaN이면 false로 반환

  isNaN - NaN인지 검사 숫자가 아니면 변환한 후 검사

  parseFloat - 실수로 해석하여 반환

  parseInt - 정수로 해석

        문자열이 아니면 문자열로 변환 후 정수로 해석하여 반환

        두 번째 인수로 진법을 나타내는 기수(2 ~ 36)를 전달할 수 있다.
        첫 번째 인수로 전달된 문자열을 두 번째 기수 번호로 변환한다.
        두 번째 기수가 없는 경우 반환값은 10진수로 인식한다.

        문자열을 8진수로 해석하려면 지수를 반드시 지정해야 한다.

        첫 번째 문자가 해당 지수의 숫자로 변환될 수 없다면 NaN을 반환

  encodeURI / decodeURI || encodeURIComponent / decodeURIComponent
    encodeURI()와 decodeURI() 함수는 URL을 인코딩하고 디코딩하는 데 사용됩니다.
    이 함수들은 일부 특수 문자와 공백을 인코딩하여 URL을 안전하게 만들어주기 때문에 유용합니다.

    그러나 최근 웹 개발에서는 encodeURIComponent()와 decodeURIComponent() 함수를 더 자주 사용하고 있습니다. 
    이 함수들은 encodeURI()와 decodeURI() 함수와 비슷하지만, 
    좀 더 엄격한 규칙으로 인코딩하고 디코딩하기 때문에 더 안전합니다. 

    따라서, encodeURI()와 decodeURI() 함수를 사용해도 문제는 없지만, 
    encodeURIComponent()와 decodeURIComponent() 함수를 사용하는 것이 더 권장됩니다.

21.4.3 암묵적 전역 (37, 38, 39)

  예제를 보게되면 y는 변수로 선언 하지 않았다. 하지만 에러없이 실행이된다. 
  이유는 자바스크립트 엔진은 y = 20을 window.y = 20으로 해석하여 전역 객체에 프로퍼티를 동적 생성한다.
  결국 y는 전역 객체의 프로퍼티가 되어 마치 전역 변수처럼 동작한다.
  이러한 현상을 암묵적 전역(implicit global)이라 한다.

  하지만 y는 변수 선언 없이 단지 전역 객체의 프로퍼티로 추가되었을 뿐 변수는 아니다.
  변수가 아니므로 변수 호이스팅이 발생하지 않는다.

  또한 변수가 아니라 단지 프로퍼티인 y는 delete 연산자로 삭제 가능하다. 
  전역 변수는 프로퍼티이지만 delete 연산자로 삭제 불가하다.