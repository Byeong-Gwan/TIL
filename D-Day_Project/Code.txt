
** var, let, const **

1. var = 변수 선언을 위해 사용 된다. 
  - var는 개발자가 지양해야되는 선언문이다.
  - var는 재선언, 재할당 모두 가능하다.
  - var는 호이스팅이 가능하다. 선언전에 호출하게 되면 undefined의 값이 저장되어 있다.
    이후에 var에 값을 선언하게 되면 이후의 호출에는 선언된 문장이 입력되어 출력한다.
  - var는 변수를 재선언을 할 수 있다. (치명적인 문제)
    이 부분은 꽤나 치명적인 문제가 된다 혼자서 하는 프로젝트는 본인이 조심해서 진행하면 되겠지만,
    팀단위로 진행하는 프로젝트인 경우에 최초로 선언한 var 변수명이 다른 팀원이 뒷 부분에서 
    같은 이름의 변수명을 선언하게 되면, 이후에 다른 사람이 선언했을 시 전여 예상 못한 값이 
    나온다. 이런 경우 어디가 문제인지 찾는데 걸리는 시간과 매번 변수명을 확인하면서 겹치지
    않게 하기 위해 많은 시간이 소비된다. 그렇기 때문에 var를 꼭 사용해야 되는 경우가 아니라면,
    왠만하면 지양해야 되는 이유이다.

2. let = 변수 선언을 위해 사용
  - let은 var와 같은 변수를 선언할 때 사용된다.
  - let과 var의 다른 점으로는 재할당은 var와 같이 허용되나, 재선언은 불가능 하다.

3. const = 선언문
  - var,let과 같은거 같지만 조금 차이가 있다. 
    const는 재선언, 재할당 모두 불가능하다. (상수)

** Code에 사용 **
1. document 객체
  - window 객체 그중 document는 window의 하위 객체이며 
    html의 코드들이 파싱되어 javascript 정보를 가지고 있음

  * window 객체가 가지고 있는 프로퍼티 6가지
    - document(브라우저 상의 문서), navigator(브라우저 자체), 
      location(브라우저 주소(URL)), frames(프레임셋), 
      screen(화면 자체), history(기록 객체)
    
    - document (forms, cookie, Links/ anchors, images)

2. querySelector()
  - html에서 id or class 값을 가져와서 작업함 
  - id or class 의 명이 정확히 정의되어 있지 않고 하나의 이름으로 작성이 된 경우
    가장 위의 값을 가져옴
  - 만약 전체 변경을 원할 때에는 querySelectorAll()을 사용 

3. return 
  - return을 사용하는 이유로는 함수를 즉시 종료하기 위해서
  - return 값이 없으면, if문이 'true'인 경우 이지만 아래의 코드를 읽어 내려간다.
    이 때 return 값이 있을 경우 'true'인 경우 if문을 빠져 나오게 되고, 'false'인 경우
    아래의 코드를 return문을 만나기 전까지 실행 하게 된다.

4. localStorage 객체 
  - window 객체의 하위 객체로서 window.localStorage 이렇게 사용 된다.
    window는 가장 큰 객체이기 때문에 생략이 가능하다.(명확한 답은 아님)
  - localStorage는 로컬에 값이 저장된다. 
    이 말은 창을 닫고 컴퓨터를 껐다 켜도 기존에 저장했던 값은 그대로 유지하게 할 수 있다.
    (ex) D-Day, TodoList // 이 와 같이 컴퓨터를 껐다 켜도 유지 되어야 될 때 사용

  * localStorage && sessionStorage 차의점
    - 위에서 말한 것과 같이 localStorage은 로컬에 원하는 값을 저장하는 것이고,
      sessionStorage은 session에 값을 저장하는 것이다 이 차이점은 브라우저를 종료하게 되면,
      session에 값이 저장되어 있던 값은 제거 되어 없어진다.
      ㄴ 사용할 때 값을 계속 유지해야되는지, 
        값을 브라우저 종류전까지 유지되어야 하는지 정해서 사용해야 된다.

5. setItem(key, value)
  - localStorage.setItem()을 사용했었다. 
    이유로는 새로운 Item을 추가 하기 위해서 이다. setItem()을 localStorage에 사용하게 되면,
    로컬에 새로운 Item을 추가하는 것이다.
  - localStorage.setItem()의 값은 문자열로 저장된다. 만약 객체 or 배열로 저장하기 위해서는
    JSON.Stringify(객체명 or 배열명); 이렇게 저장해야 객체 or 배열의 값이 저장된다.

  * localStorage ( 추가, 읽기, 삭제, 갯수, index로 key값 찾기 등등)
    - setItem() : key, value 추가하기             ex) localStorage.setItem(key, value);
    - getItem() : value 값 읽어 오기              ex) localStorage.getItem(key);
    - removeItem() : item 삭제                    ex) localStorage.removeItem(key);
    - clear() : 도메인 내의 localStorage 값 삭제   ex) localStorage.clear(); 
    - length : 전체 item 갯수                     ex) localStorage.length;
    - key() : index로 key값 찾기                  ex) localStorage.key(index);

6. Date 객체
  - 사용된 new Date() 는 객체로 반환 합니다. 
    보여 주고자 하는 시간의 기준은 장에서부터 시작하기를 희망하기 때문에 
    new Date(date).setHours(0, 0, 0, 0)으로 시작 시간을 자정으로 변환 시켜서 사용해야됨
    setHours(0, 0, 0, 0) 하지 않으면 기준이 오전 9시로 되어서 남은 D-day를 보여주게 된다.

7. javascript에서 css and HTML 효과 주기
  - container.style.display = "none";
    messageContainer.innerHTML = "<h3>타이머가 종료되었습니다.</h3>";
    messageContainer.style.display = "flex";
    위 예시 코드를 통해서 style과 HTML <h3>태그를 추가해줄 수 있다.
    * 참고로 innerHTML은 DOM객체의 속성 중 하나이다.
    
8. clearInterval() 함수 
  - clearInterval() 함수를 사용하기 위해서 setClearInterval() 함수 생성
    
    const setClearInterval = function () {
      localStorage.removeItem("saved-date");
      for (let i = 0; i < intervalIdArr.length; i++) {
        clearInterval(intervalIdArr[i]);
      }
    };

    "localStorage.removeItem("saved-date"); => 로컬에 저장되어 있는 item을 제거"하는 로직
    "for문을 통해서 미리 선언되어 있는 배열 intervalIdArr의 길이(length)보다 i가 크거나 같아지면
     clearInterval() 함수를 통해서 intervalIdArr[i] 배열을 반복을 중단하라" 라는 의미
    - 조건에 따라 멈추게 하기 위한 로직 조건이 필요 없을 때에는 clearInterval(변수명); 이렇게
      사용해도 됨

    * 반대로 setInterval(콜백함수, 시간);
      - "시간(ms)"을 간격으로 "콜백함수"를 반복 호출 하는 함수
      - clearInterval() 호출로 반복을 중단하게 되면, 다시 setInterval() 함수 호출하여 재시작하면 됨

9. 일반함수 && 익명함수
 * 함수 선언식의 기명함수는 호이스팅의 영향을 받는 반면에 
  '함수 표현식의 익명함수는 호이스팅의 영향을 받지 않습니다.'(함수 표현식 사용 권장)

  - 함수의 표현식은 익명함수라고 합니다.
    const 함수이름 = function(param1, param2, ...){
      // ...code here
      return 결과값
    }

  - 함수의 선언문
    function 함수이름(param1, param2, ...){
      // ...code here
      return 결과값
    }

  - 화살표 함수
    const 함수이름 = ( param1, param2, ... )=>{
      // ...code here
      return 결과값
    }

10. 호이스팅 (60% 이해)
  - 함수, 변수의 선언이 마치 위로 끌어올려진 것처럼 동작하는 것
  - javascript에서 이러한 동작이 발생하는 이유는 javascript가 코드를 해석하고 실행하는 과정과
    내부적인 변수의 선언, 할당 과정 때문 javascript는 코드를 실행하기 전에 먼저 선언된 변수, 함수
    등을 전역 환경에 담아두게 됩니다. 그리고 이후에 정리된 코드를 실행하는 과정을 수행
  - var 키워드는 선언하기 전에 이미 undefind의 값으로 초기화 되어 있기 때문에 호이스팅 시 문제없이 실행된다.
  - let, const, class를 이용한 선언문은 호이스팅이 일어 나지 않은 것 처럼 보이게 해준다. 
    모든 선언문은 호이스팅이 발생한다.
    var 이외의 선언문일 때는 ReferenceError가 발생하는 이유는 var와 다르게 실행 시  
    스코프의 시작에서 변수의 선언까지 *일시적 사각지대(Temporal Dead Zone; TDZ)에 빠지기 때문이다.

  - 변수는 3단계에 걸쳐서 생성
     1. 1단계: 선언 단계(Declaration phase)
          변수를 실행 컨텍스트의 변수 객체에 등록한다.
          이 변수 객체는 스코프가 참조하는 대상이 된다.
     2. 2단계: 초기화 단계(Initialization phase)
          변수 객체에 등록된 변수를 위한 공간을 메모리에 확보한다.
          이 단계에서 변수는 undefined로 초기화 된다.
     3. 3단계: 할당 단계(Assignment phase)
          undefined로 초기화된 변수에 실제 값을 할당한다.

  * var는 1단계와 2단계가 동시에 일어 나기때문에 에러 없이 실행됨
    반면 let, const는 1단계와 2단계 사이에 TDZ(일시적 사각지대)로 인해서 ReferenceError가 발생하게 된다.