** 빌트인 객체를 공부하는 이유 **

1. 기본적인 객체 및 메소드를 이해할 수 있습니다.

  자바스크립트에서는 Array,Object, String, Number 등  다양한 빌트인 객체를 제공합니다.
  이들 객체는 자바스크립트에서 가장 기본적인 객체로, 많은 개발자들이 일상적으로 사용합니다.
  따라서 빌트인 객체를 이해하면 프로그래밍에 있어서 기본적인 개념을 이해할 수 있습니다.

2. 코드의 효율성을 높일 수 있습니다.

  빌트인 객체의 메소드를 사용하면, 새로운 함수를 작성하지 않고도 코드를 더욱 간결하고
  효율적으로 작성할 수 잇습니다. 예를 들어, Array 객체릐 forEach 메소드를 사용하면 for 문을
  사용하지 않고도 배열의 모든 요소를 순회할 수 있습니다.

3. 코드의 가독성을 높일 수 있습니다.

  빌트인 객체는 자바스크립트에서 기본적으로 제공되므로, 많은 개발자들이 이미 이를 사용하고
  있습니다. 따라서 빌트인 객체를 사용하는 코드는 다른 개발자들이 이해하기 쉽습니다.
  또한, 빌트인 객체의 메소드는 자바스크립트에서 표준적으로 사용되므로, 이를 사용하는 코드는
  일관성 있고 가독성이 높아집니다.

4. 자바스크립트를 더욱 깊이 이해할 수 있습니다.

  빌트인 객체를 공부하면서 객체지향 프로그래밍과 함수형 프로그래밍의 개념을 이해할 수 있습니다.
  또한, 빌트인 객체의 내부 동작 원리를 이해하면 자바스크립트의 동작 원리를 더욱 깊이 이해할 수 
  있습니다.


  
1. 표준 빌트인 객체 (standard built-in objects/ native objects/ global objects)

  표준 빌트인 객체는 자바스크립트에서 기본적으로 제공되는 객체로서, 모든 
  자바스크립트 환경에서 사용할 수 있습니다. 이들 객체는 자바스크립트 언어 자체의 일부로
  구현되어 있으며, 언어 사용자가 직접 만들지 않아도 사용할 수 있습니다.

  각각의 객체는 특정한 목적을 가지고 있으며, 그 목적에 따라 다양한 속성과 메소드를 가지고 있습니다.
  예를 들어, Array 객체는 배열을 다루는 데 필요한 메소드를 제공하고, Data 객체는 날짜와 시간을
  다루는 데 필요한 메소드를 제공합니다.

  이러한 표준 빌트인 객체는 자바스크립트 프로그래밍에서 매우 중요한 역할을 합니다.
  개발자들은 이들 객체를 잘 이해하고 활용하여, 빠르고 효율적인 코드를 작성할 수 있습니다.
  또한, 이들 객체는 모든 자바스크립트 환경에서 동일하게 동작하기 때문에, 프로그램을 개발 할 때
  이들 객체를 활용하여 일관성 있고 표준적인 코드를 작성할 수 있습니다.

2. 호스트 객체 (host objects)

  자바스크립트 코드가 실행되는 환경에서 제공되는 객체를 의미합니다.
  이러한 환경은 브라우저, Node.js, 웹 워커 등이 있습니다.

  호스트 객체는 자바스크립트 언어 자체의 일부가 아닌, 환경에서 제공하는 기능으로 구현된 객체입니다.
  예를 들어, 브라우저 환경에서는 Document, Element, XMLHttpRequest 등의 객체를 제공하며,
  Node.js 환경에서는 FileSystem, HTTP 등의 객체를 제공합니다.

  호스트 객체는 표준 빌트인 객체와 달리, 각 환경마다 제공하는 객체가 다를 수 있습니다.
  또한 호스트 객체는 표준 빌트인 객체보다 더 많은 기능과 메소드를 제공할 수도 있습니다.

  호스트 객체는 해당 환경에서만 사용할 수 있으며, 호스트 객체의 사용 방법과 동작 방식은
  해당 환경의 문서를 참고해야 합니다. 호스트 객체를 사용하면 자바스크립트 코드가 해당 환경에서
  더 다양한 작업을 수행할 수 있게 되며, 이를 통해 더 다양한 응용 프로그램을 개발할 수 있습니다.

3. 사용자 정의 객체 (user-defined objects)

  