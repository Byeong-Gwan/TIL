** 함수와 일급 객체 **

18.1 일급 객체 (01)

  1. 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.

  2. 변수나 자료구조(객체, 배열 등)에 저장할 수 있다.

  3. 함수의 매개변수에 전달할 수 있다.

  4. 함수의 반환값으로 사용할 수 있다.

  함수가 일급 객체라는 것은 함수를 객체와 동일하게 사용할 수 있다는 의미이다.

  함수를 다른 병수와 동일하게 다루는 언어는 일습 함수를 가졌다고 표현합니다.
  예를 들어, 일급 함수를 가진 언어에서는 함수를 다른 함수에 인수로 제공하거나,
  함수가 함수를 반환할 수 있으며, 변수에도 할당할 수 있습니다.

  Wiki 참고
  일급 객체 - 컴퓨터 프로그래밍 언어 디자인에서, 일급 객체(first-class object)란 
            다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 가르킨다.
            보통 함수에 인자로 넘기기, 수정하기, 변수에 대입하기와 같은 연산을 지원할
            때 일급 객체라고 한다.

18.2 함수 객체의 프로퍼티 (02, 03)

  함수는 객체다. 함수도 프로퍼티를 가질 수 있다. 
  함수 객체의 데이터 프로퍼티는  arguments, caller, length, name, prototype 프로퍼티 
  모두 갖고 있다.

18.2.1 arguments 프로퍼티 (04, 05, 06, 07, 08)

  arguments 프로퍼티는 인수들의 정보를 갖고 있다. 이 전에 선언된 매걔변수의 개수 초과 하면 무시하고,
  미만이면 'NaN'값을 내뱉는다.

  arguments 객체는 인수를 프로퍼티 값으로 소유하며 프로퍼티 키는 인수의 순서를 나타낸다.
  arguments 객체의 callee 프로퍼티는 호출되어 arguments 객체를 생성한 함수, 
  즉 함수 자신을 가르키고 arguments 객체의 length 프로퍼티는 인수의 개수를 가르킨다.

  선언된 매개변수의 개수, 함수를 호출할 때 전달하는 인수의 개수를 확인하지 않는 자바스크립트의 특성
  이러한 특성 때문에 인수 개수 확인하여 함수의 동작을 달리 정의할 필요가 있을 경우 
  arguments 객체 사용이 유용하게 적용된다.

  즉, arguments 객체는 매개변수 개수를 확정할 수 없는 '가변 인자 함수'를 구현할 때 유용하다.

  arguments 객체는 배열 형태로 인자 정보를 담고 있지만 실제 배열이 아닌 유사 배열 객체(array-like Object)다.
  유사 배열 객체란 length 프로퍼티를 가진 객체로 for 문으로 순회할 수 있는 객체를 말한다.

  ES5에서 arguments를 배열로 호출하게 되면, 에러가 발생한다.
  배열로 호출하기 위해서는 'Function.prototype.call', 'Function.prototype.apply'를 사용해서
  간접 호출해야 하는 번거로움이 있다.

  ES6 Rest parameter 도입으로 위와 같은 번거로움을 해결함

18.2.2 caller 프로퍼티 (09)

  ECMAScript 사양에 포함되지 않은 비표준 프로퍼티
  함수 객체의 caller 프로퍼티는 함수 자신을 호출한 함수를 가리킨다.

18.2.3 length 프로퍼티 (10)

  함수 객체의 length 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수

  arguments 객체의 length : 인자(argument) 갯수
  함수 객체의 length : 매개변수(parameter)의 갯수

18.2.4 name 프로퍼티 (11)

  ES6부터 정식 표준으로 허용

  ES5 name 프로퍼티 : 빈 문자열을 값으로 갖는다.
  ES6 name 프로퍼티 : 함수 객체를 가리키는 식별자(변수명)를 값으로 갖는다.

18.2.5 __proto__ 접근자 프로퍼티 (12)

  모든 객체는 __proto__를 통해 자신이 물려받은 [[Prototype]]값에 접근이 가능하다.
  단, [[Prototype]] 내부 슬롯에는 직접 접근이 불가
  이유는 프로프타입 체인(prototype chain)의 단방향을 지키기 위함. 

18.2.6 prototype 프로퍼티 (13)

  prototype 프로퍼티는 생성자 함수로 호출할 수 있는 함수 객체, 즉 constructor만이 소유하는 프로퍼티
  일반 객체와 생성자 함수로 호출할 수 없는 non-constructor에는 prototype 프로퍼티가 없다.


<참고>
  JavaScript는 prototype-based Object Oriented programming 이다.
  자바와 C++은 클래스 기반 프로그래밍 언어
  JavaScript는 프로토타입 기반의 객체지향 프로그래밍 언어 이다.

  여기서 상속에 대한 개념을 알고 넘어 가야함.
  __proto__는 prototype의 자식 이고 prototype은 부모가 된다.
  예로 "const test = new String('abc');"라고 하면 
  여기서 변수명 "test"는 String 이라는 부모를 갖는다.
  -> __proto__에 String.prototype이 이미 자동적으로 정의되어 있다. 
