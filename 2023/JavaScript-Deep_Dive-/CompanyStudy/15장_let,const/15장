** let, const 키워드와 블록 레벨 스코프(Scope 15.1 ~ 15.2) 상 **

15.1 var 키워드로 선언한 변수의 문제점
      ES5까지는 var로만 변수 선언이 가능, 주의를 기울이지 않으면 심각한 문제를 발생 시킬 수 있음

15.1.1 변수 중복 선언 허용 (1)

      var : 중복된 변수명 선언 시 아무런 에러가 없이 실행 
            마지막 선언된 값으로 초기화 되어서 의도치 않은 값을 호출하여 문제 발생
            변수 선언 전에 호출을 해도 에러 없이 "undefined" 출력
            함수 레벨 스코프를 따른다. (15.1.3 변수 호이스팅 내용 중복 (4))
15.1.2 함수 레벨 스코프 (2, 3)

      var 키워드는 오로직 함수 코드 블록에서만 지역 스코프를 인정한다.
      함수 코드 블록 이 외에는 모두 전역 스코프로 인정된다.

15.2 let 키워드 (4)

      ES6 부터 새롭게 변수 선언 키워드로 let, const를 도입

15.2.1 변수 중복 선언 금지 (5)
      var 키워드는 중복 선언 시 아무런 에러 없이 실행, 반면 let 키워드는 중복 선언 시 문법 에러 발생

15.2.2 블록 레벨 스코프 (6)

      let : 선언한 변수는 모든 코드 블록(함수, if문, for문, while문, try/catch문 등)을
            지역 스코프로 인정하는 블록 레벨 스코프(block-level Scope)를 따른다.


      함수도 코드 블록이므로 스코프를 만든다. 이 때 함수 내의 코드 블록은 함수 레벨 스코프에 중첩된다.(06_15_1)

15.2.3 변수 호이스팅 (7, 8, 9 10)

      let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작 한다.

      let 키워드로 선언한 변수는 "선언단계"와 "초기화 단계"가 분리되어 진행된다.
      자바스크립트 엔진에 의해 암묵적으로 선언 단계가 먼저 실행되지만 초기화 단계는 
      변수 선언문에 도달했을 때 실행된다.
      그렇기 때문에 초기화 단계 실행 전에 변수에 접근하게 되면 참조 에러(ReferenceError) 발생
      
      일시적 사각지대(Temporal Dead Zone::TDZ) : 스코프의 시작 지점부터 초기화 지점까지 변수를 참조할 수 없는 구간

      자바스크립트는 ES6에서 도입된 let, const를 포함해서 모든 선언(var, let, const, function, function*, class 등)을
      호이스팅한다. 단 ES6에서 도입된 let, const, class를 사용한 선언문은 호이스팅이 발생하지 않는 것처럼 동작한다.

15.2.4 전역 객체와 let (11, 12)

      var 키워드의 암묵적 전역은 객체 window의 프로퍼티가 된다.(window 생략 가능)

      let 키워드는 var 키워드와 다르게 let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다.
      let 전역 변수는 보이지 않는 개념적인 블록 내에 존재하게 된다. (23장 실행 컨텍스트에서 자세히)

15.3 const 키워드

      const 키워드는 상수(constant)를 선언하기 위해 사용된다. 하지만 반드시 상수만을 위해 사용되는건 아니다.
      const와 let 키워드 특징이 대부분 동일

15.3.1 선언과 초기화 (13, 14, 15)

      const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 된다.

      const 키워드로 선언한 변수는 let 키워드로 선언한 변수와 같은 블록 레벨 스코프를 가지며,
      변수 호이스팅이 발생하지 않는 것처럼 동작한다.

15.3.2 재할당 금지 (16)

      var, let 키워드는 재할당이 가능하나 const 키워드로 선언한 변수는 재할당이 금지 된다.

15.3.3 상수 (17, 18)

      const 키워드로 선언한 원시 값은 변경 불가능한 값(immutable value)이므로 재할당이 안되는 상수와 같은 용도로 사용된다.
      상수는 재할당이 금지된 변수를 말한다.

      const 키워드로 선언된 변수에 원시 값을 할당한 경우
      원시 값은 변경할 수 없는 값이고, const 키워드에 의해 재할당이 금지되므로 할당된 값을 변경할 수 있는 방법은 없다.

15.3.4 const 키워드와 객체 (19)

      const 키워드는 재할당을 금지할 뿐 "불변"을 의미하지 않는다. 
      즉, 새로운 값을 할당하는 것은 불가능하지만 프로퍼티 동적 생성, 삭제, 프로퍼티 값의 변경을 통해
      객체를 변경하는 것은 가능하다.
      이 때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.

15.4 var vs. let vs. const

      1. ES6에서느 var 키워드 사용 지양
      2. 재할당이 필요한 경우 let 키워드 사용 (스코프 범위를 최대한 좁게)
      3. 재할당이 필요없는 상수 타입과 객체에는 const 사용
            (재할당을 금지하므로 var, let 키워드 보다 안전)
