** 24장 클로저 **

    클로저는 자바스크립트의 고유의 개념이 아니다.
    MDN에서의 클로저 개념은
    "A closure is the combination of a function and the lexical environment 
        within which that function was declared."
        "클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다."

    이 내용에서 핵심 키워드는 "함수가 선언된 렉시컬 환경"이다.
(01)
    정의된 중첩 함수가 아니라면 같은 선에 있는 함수로는 접근할 수 없다.
(02)

24.1 렉시컬 스코프

    자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디에 정의했는지에 따라
    상위 스코프를 결정한다. 이를 렉시컬 스코프(정적 스코프)라 한다.
(03)
    렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값, 즉 상위 스코프에 대한 참조는
    함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 졀정된다. 이것이 바로 렉시컬 스코프다.
    
24.2 함수 객체의 내부 슬롯[[Environment]]

    함수는 자신의 내부 슬롯 [[Environment]]에 자신이 정의 된 환경, 즉 상위 스코프의 참조를 저장한다.

    함수 객체의 내부 슬롯 [[Environment]]에 저장된 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가
    바로 상위 스코프다. 또한 자신이 호출되었을 때 생성될 함수 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"
    에 저장될 참조값이다. 함수 객체는 내부 슬롯 [[Environment]]에 저장한 렉시컬 환경의 참조, 
    즉 상위 스코프를 자신이 존재하는 한 기억한다.
(04)

    함수 코드 평가 순서
      1. 함수 실행 컨텍스트 생성
      2. 함수 렉시컬 환경 생성
        2.1 함수 환경 레코드 생성
        2.2 this 바인딩
        2.3 외부 렉시컬 환경에 대한 참조 결정

    외부 렉시컬 환경에 대한 참조에는 함수 객체의 내부 슬롯 [[Environment]]에 저장된 렉시컬 환경의 참조가
    할당된다.

24.3 클로저와 렉시컬 환경

(05)

    외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수를
    참조할 수 있다. 이러한 중첩 함수를 클로저(closure)라고 부른다.

    자바스크립트의 모든 함수는 자신의 상위 스코프를 기억한다. 함수를 어디서 호출하든 상관없이 함수는 
    언제나 자신이 기억하는 상위 스코프의 식별자를 참조할 수 있으며 식별자에 바인딩된 값을 변경할 수도 있다.

    위 예제에 outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 제거되지만 
    outer 함수의 렉시컬 환경까지 소멸하는 것은 아니다.

(06)
(img)
    위 예제의 bar 함수는 클로저라고 할 수 없다.
(07)
(img)
    이 예제는 외부 함수 foo 보다 중첩 함수 bar의 생명 주기가 짧다 그렇기에 클로저의 본질에 부합하지 않는다.

(08)
(img)
    이 예제처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 외부 함수의
    변수를 참조할 수 있다. 이러한 중첩 함수를 클로저라고 부른다.
    클로저는 중첩 함수가 상위 스코프의 식별자를 참조하고 있고 중첩 함수가 외부 함수보다 더 오래 유지되는
    경우에 한정하는 것이 일반적이다.

    위 예제이서 클로저에 의해 참조되는 상위 스코프의 변수(foo 함수의 x 변수)를 자유 변수(free variable)라고
    부른다. 클로저란 "함수가 자유 변수에 대해 닫혀있다"라는 의미이다. 즉, "자유 변수에 묶여있는 함수"

24.4 클로저의 활용

    클로저는 상태(state)를 안전하게 변경하고 유지하기 위해 사용한다.
    상태를 안전하게 은닉(information hiding)하고 특정 함수에게만 상태 변경을 허용한다.

(09)
    이 예제는 오류 발생 가능한 코드이다. 이 코드가 정상 동작하기 위해서는 전제 조건이 지켜져야한다.

    1. 카운트 상태(num 변수의 값)는 increase 함수가 호출되기 전까지 변경되지 않고 유지되어야 한다.
    2. 이를 위해 카운트 상태(num 변수의 값)는 increase 함수만이 변경할 수 있어야 한다.

(10)
    이렇게 let num = 0; 을 지역 변수로 변경하여 의도치 않은 상태 변경을 막을 수 있다.
(11)
    클로저는 상태(state)가 의도치 않게 변경되지 않도록 안전하게 은닉(information hiding)하고
    특정 함수에게만 상태 변경을 허용하여 상태를 안전하게 변경하고 유지하기 위해 사용한다.

(12, 13)

    클로저를 사용하는 이유는 외부 상태 변경이나 가변(mutable)데이터를 피하고 불변성(immutability)을
    지향하는 함수형 프로그래밍에서 부수 효과를 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이기
    위해 클로저를 적극적으로 사용된다.

(14)
    makeCounter 함수를 호출해 함수를 반환할 때 반환된 함수는 자신만의 독립된 렉시컬 환경을 갖는다.

(15)

24.5 캡슐화와 정보 은닉

    캡슐화는 정보 은닉(information hiding)과 같은 의미이다.
    정보 은닉은 외부에 공개할 필요가 없는 구현의 일부를 외부에 공개되지 않도록 감추어 적절치 못한
    접근으로부터 객체의 상태가 변경되는 것을 방지해 정보를 보호하고, 객체 간의 상호 의존성,
    즉 결합도(coupling)를 낮추는 효과가 있다.

    자바스크립트 객체의 모든 프로퍼티와 메서드는 기본적으로 public하다.

(16, 17, 18, 19)

24.6 자주 발생하는 실수

    클로저를 사용할 때 자주 발생할 수 있는 실수
(20)
    위 예제는 var가 블록 레벨 스코프라고 생각들지만, 함수 레벨 스코프를 갖기 때문에 전역 변수이다.
    그래서 원하는 0, 1, 2 의 값이 아니라 i = 3의 값을 갖게 되므로 3이 세번 출력되게 된다.
(21)
    var 대신 let을 사용하면 동작이 잘된다. 이유는 자바스크립트의 함수 레벨 스코프 특성으로 인해 for문의 
    변수 선언한 변수가 전역 변수가 되기 때문에 발생하는 현상이다. ES6의 let 키워드를 사용하면 
    이 같은 번거로움이 해결된다.
(22)
    위 와 같이 var를 let 키워드로 변경하게 되면 블록 레벨 스코프로 인식하게 되고 그로 인해서
    for문이 실행될 때마다 for문 코드 블록의 새로운 렉시컬 환경이 생성된다.

    또 다른 방법으로 함수형 프로그래밍 기법인 고차 함수를 사용하는 방법이 있다. 
    이 방법은 변수와 반복문의 사용을 억제할 수 있기 때문에 오류를 줄이고 가독성을 좋게 만든다.
(23)




