** 25장 클래스 **

25.1 클래스는 프로토타입의 문법적 설탕인가?

    자바스크립틑는 프로토타입 기반(prototype based) 객체지향 언어다.

    프로토타입 기반 객체지향 언어는 클래스가 필요 없는(class free) 객체지향 프로그래밍 언어다.
    ES5에서는 클래스 없이도 다음과 같이 생성자 함수와 프로토타입을 통해 객체지향 언어의 상속을 구현할 수 있다.

    클래스는 함수이며 기존 프로토타입 기반 패턴을 클래스 기반 패턴처럼 사용할 수 있도록 하는 
    문법적 설탕(syntactic sugar)이라고 볼 수도 있다.
(01)
    단, 클래스와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만 정확히 동일하게 동작하지는 않는다.
    클래스는 생성자 함수보다 엄격하며 생성자 함수에서는 제공하지 않는 기능도 제공한다.

    클래스는 생성자 함수와 매우 유사하게 동작하지만 몇가지 차이가 있다.

    1. 클래스를 new 연산자 없이 호출하면 에러가 발생한다. 하지만 생성자 함수를 new 연산자 없이 호출하면
        일반 함수로서 호출된다.
    2. 클래스는 상속을 지원하는 extends와 super 키워드를 제공한다. 하지만 생성자 함수는 extends와 super
        키워드를 지원하지 않는다.
    3. 클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 하지만 함수 선언문으로 정의된 생성자 함수는 함수 호이스팅이,
        함수 표현식으로 정의한 생성자 함수는 변수 호이스팅이 발생한다.
    4. 클래스 내의 모든 코드에는 암묵적으로 strict mode가 지정되어 실행되며 strict mode를 해제할 수 없다.
        하지만 생성자 함수는 암묵적으로 strict mode가 지정되지 않는다.
    5. 클래스의 constructor, 프로토타입 메서드, 정적 메서드는 모두 프로퍼티 어트리뷰트 [[Enumerable]]의
        값이 false다. 다시 말해, 열거되지 않는다.

    클래스를 프로토타입 기반 객체 생성 패턴의 단순한 문법적 설탕이라고 보기보다는 새로운 객체 생성
    매커니즘으로 보는 것이 좀 더 합당하다.

25.2 클래스 정의

    class 키워드를 사용해서 정의한다. 클래스 이름은 생성자 함수와 마찬가지로 파스칼 케이스를 사용하는 것이 일반적이다.
    꼭 파스칼 케이스를 사용하지 않아도 에러가 발생하지는 않는다.
(02,03)
    클래스를 표현식으로 정의할 수 있다는 것은 클래스가 값으로 사용할 수 있는 일급 객체라는 것을 의미한다.
    즉, 클래스는 일급 객체로서 특징이 있다.
        - 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.
        - 변수나 자료구조(객체, 배열 등)에 저장할 수 있다.
        - 함수의 매개변수에게 전달할 수 있다.
        - 함수의 반환값으로 사용할 수 있다.

    클래스 몸체에서 정의할 수 있는 메서드는 constructor(생성자), 프로토타입 메서드, 정적 메서드가 있다.
(04)
    클래스와 생성자 함수의 정의 방식은 형태적인 면에서 매우 유사하다.

25.3 클래스 호이스팅

    클래스는 함수로 평가된다.
(05,06,07)

    프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍(paor)으로 존재한다.
    클래스는 클래스 정의 이전에 참조 불가하다.
    클래스도 호이스팅이 발생한다.

25.4 인스턴스 생성

    클래스는 생성자 함수이며, new 연산자와 함께 호출되어 인스턴스를 생성한다.
(08,09)
    클래스를 가리키는 식별자(Person, Persom)를 사용해 인스턴스를 생성하지 않고 
    클래스 표현식의 클래스 이름(MyClass)을 사용해 인스턴스를 생성하면 에러가 발생한다.
(10)
    이는 기명 함수 표현식과 마찬가지로 클래스 표현식에서 사용한 클래스 이름은 외부 코드에서 접근 불가능하기 때문이다.

25.5 메서드

    클래스 몸체에는 0개 이상의 메서드만 선언할 수 있다. constructor(생성자), 프로토타입 메서드, 정적 메서드

25.5.1 constructor

    constructor는 인스턴스를 생성하고 초기화하기 위한 특수한 메서드다. constructor는 이름을 변경할 수 없다.
(11,12)
    모든 함수 객체가 가지고 있는 prototype 프로퍼티가 가리키는 프로토타입 객체의 constructor 프로퍼티는 클래스
    자신을 가리키고 있다. 이는 클래스가 인스턴스를 생성하는 생성자 함수라는 것을 의미한다.
    즉, new 연산자와 함께 클래스를 호출하면 클래스는 인스턴스를 생성한다.

    생성자 함수와 마찬가지로 constructor 내부에서 this에 추가한 프로퍼티는 인스턴스 프로퍼티가 된다.
    constructor 내부의 this는 생성자 함수와 마찬가지로 클래스가 생성한 인스턴스를 가리킨다.
(14)
    클래스 몸체에 정의한 constructor가 단순한 메서드가 아니라는 것을 의미한다.
    constructor는 메서드로 해석되는 것이 아니라 클래스가 평가되어 생성한 함수 객체 코드의 일부가 된다.
    클래스 정의가 평가되면 constructor의 기술된 동작을 하는 함수 객체가 생성된다.

    * 클래스의 constructor 메서드와 프로토타입의 constructor 프로퍼티 
        - 클래스의 constructor 메서드와 프로토타입의 constructor 프로퍼티는 이름이 같아 혼돈하기 쉽지만 직접적인 관련이 없다.
          프로토타입의 constructor 프로퍼티는 모든 프로토타입이 가지고 있는 프로퍼티이며, 생성자 함수를 가리킨다.

    constructor는 생성자 함수와 유사하지만 클래스 내에 최대 한 개만 존재할 수 있다 만약 클래스가 2개 이상의
    constructor를 포함하면 문법 에러(SyntaxError)가 발생한다.


25.5.2 프로토타입 메서드


25.7.5 static 필드 정의 제안
